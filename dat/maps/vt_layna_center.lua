-- Valyria Tear map editor begin. Do not edit this line or put anything before this line. --

-- Set the namespace according to the map name.
local ns = {};
setmetatable(ns, {__index = _G});
vt_layna_center = ns;
setfenv(1, ns);

-- A reference to the C++ MapMode object that was created with this file
map = {}

-- The map name and location image
map_name = "Mountain Village of Layna"
map_image_filename = "img/menus/locations/mountain_village.png"
map_subname = "Village center"

-- The number of rows, and columns that compose the map
num_tile_cols = 60
num_tile_rows = 40


-- The contexts names and inheritance definition
-- Tells the context id the current context inherit from
-- This means that the parent context will be used as a base, and the current
-- context will only have its own differences from it.
-- At least, the base context (id:0) can't a parent context, thus it should be equal to -1.
-- Note that a context cannot inherit from itself or a context with a higher id
-- since it would lead to nasty and useless loading use cases.
contexts = {}
contexts[0] = {}
contexts[0].name = "Base"
contexts[0].inherit_from = -1

-- The music file used as default background music on this map.
-- Other musics will have to handled through scripting.
music_filename = "mus/Caketown_1-OGA-mat-pablo.ogg"

-- The names of the tilesets used, with the path and file extension omitted
tileset_filenames = {}
tileset_filenames[1] = "mountain_landscape"
tileset_filenames[2] = "mountain_house_exterior"
tileset_filenames[3] = "mountain_house_exterior2"

-- The map grid to indicate walkability. The size of the grid is 4x the size of the tile layer tables
-- Walkability status of tiles for 32 contexts. Zero indicates walkable for all contexts. Valid range: [0:2^32-1]
-- Example: 1 (BIN 001) = wall for first context only, 2 (BIN 010) means wall for second context only, 5 (BIN 101) means Wall for first and third context.
map_grid = {}
map_grid[0] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[1] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[2] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[3] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[4] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[5] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[6] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[7] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[8] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[11] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[13] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[14] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[15] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[16] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 }
map_grid[17] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 }
map_grid[18] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 }
map_grid[19] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 }
map_grid[20] = { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 }
map_grid[21] = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 }
map_grid[22] = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 }
map_grid[23] = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 }
map_grid[24] = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 }
map_grid[25] = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 }
map_grid[26] = { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
map_grid[27] = { 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
map_grid[28] = { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1 }
map_grid[29] = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 }
map_grid[30] = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[31] = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[32] = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[33] = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[34] = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[35] = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[36] = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[37] = { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[38] = { 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[39] = { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[40] = { 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[41] = { 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[42] = { 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[43] = { 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
map_grid[44] = { 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[45] = { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[46] = { 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[47] = { 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[48] = { 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[49] = { 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[50] = { 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[51] = { 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[52] = { 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 }
map_grid[53] = { 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 }
map_grid[54] = { 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1 }
map_grid[55] = { 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0 }
map_grid[56] = { 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[57] = { 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[58] = { 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[59] = { 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
map_grid[60] = { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 }
map_grid[61] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 }
map_grid[62] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 }
map_grid[63] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 }
map_grid[64] = { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0 }
map_grid[65] = { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0 }
map_grid[66] = { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0 }
map_grid[67] = { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0 }
map_grid[68] = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 }
map_grid[69] = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 }
map_grid[70] = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 }
map_grid[71] = { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 }
map_grid[72] = { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 }
map_grid[73] = { 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 }
map_grid[74] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 }
map_grid[75] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 }
map_grid[76] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0 }
map_grid[77] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0 }
map_grid[78] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0 }
map_grid[79] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0 }

-- The tile layers. The numbers are indeces to the tile_mappings table.
layers = {}
layers[0] = {}
layers[0].type = "ground"
layers[0].name = "Village ground"
layers[0][0] = { 10, 10, 10, 10, 10, 10, 111, 12, 13, 95, 78, 95, 11, 110, 42, 111, 110, 26, 26, 78, 78, 111, 13, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 111, 110, 78, 78, 26, 10, 10, 10, 10, 111, 12, 13, 94, 78, 95, 95, 78 }
layers[0][1] = { 78, 78, 78, 78, 78, 10, 10, 10, 111, 13, 95, 78, 27, 10, 26, 42, 42, 78, 78, 78, 78, 78, 29, 78, 78, 78, 78, 78, 78, 78, 79, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 10, 10, 111, 12, 13, 95, 11, 13 }
layers[0][2] = { 78, 78, 78, 78, 78, 78, 78, 10, 10, 111, 12, 13, 27, 10, 10, 10, 78, 78, 78, 78, 78, 78, 111, 12, 12, 13, 78, 78, 11, 12, 12, 13, 11, 12, 110, 10, 10, 10, 10, 10, 10, 10, 10, 78, 78, 95, 95, 78, 78, 78, 78, 78, 78, 78, 78, 10, 111, 13, 43, 45 }
layers[0][3] = { 78, 78, 78, 78, 78, 78, 78, 78, 10, 10, 10, 111, 110, 42, 10, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 111, 12, 12, 110, 10, 10, 111, 110, 78, 78, 78, 78, 78, 78, 78, 78, 10, 10, 10, 13, 95, 95, 95, 79, 79, 27, 10, 78, 78, 78, 10, 10, 111, 13, 95 }
layers[0][4] = { 78, 78, 78, 78, 78, 78, 78, 78, 10, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 42, 10, 10, 42, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 42, 42, 111, 12, 13, 95, 79, 11, 110, 10, 10, 10, 10, 10, 127, 126, 29, 78 }
layers[0][5] = { 78, 78, 78, 79, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 42, 42, 111, 12, 12, 110, 127, 44, 126, 10, 10, 78, 111, 110, 29, 78 }
layers[0][6] = { 78, 79, 79, 79, 78, 79, 78, 78, 78, 78, 78, 78, 78, 78, 78, 95, 78, 79, 78, 79, 95, 78, 95, 95, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 42, 42, 42, 111, 13, 27, 28, 10, 78, 10, 10, 29, 78 }
layers[0][7] = { 78, 78, 79, 79, 79, 78, 78, 78, 78, 78, 78, 78, 78, 78, 95, 78, 95, 78, 79, 78, 79, 79, 79, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 79, 78, 79, 95, 95, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 111, 110, 28, 10, 78, 78, 10, 111, 12 }
layers[0][8] = { 78, 78, 79, 79, 78, 79, 78, 78, 78, 78, 79, 78, 11, 12, 13, 78, 79, 78, 78, 79, 78, 79, 78, 79, 79, 95, 78, 78, 78, 78, 79, 78, 79, 95, 79, 79, 79, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 127, 126, 10, 78, 78, 78, 10, 10 }
layers[0][9] = { 78, 78, 78, 79, 79, 11, 12, 12, 12, 13, 79, 11, 110, 10, 111, 12, 12, 13, 78, 79, 11, 12, 13, 78, 78, 79, 95, 78, 78, 78, 79, 79, 78, 11, 13, 95, 95, 79, 95, 79, 78, 79, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 29, 27, 10, 10, 10, 78, 78, 78 }
layers[0][10] = { 78, 78, 78, 11, 12, 110, 26, 26, 42, 111, 12, 110, 10, 42, 42, 26, 26, 29, 95, 11, 110, 28, 111, 12, 12, 12, 13, 78, 78, 95, 79, 79, 95, 43, 45, 79, 78, 79, 95, 95, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 111, 110, 28, 10, 10, 78, 78, 78 }
layers[0][11] = { 78, 78, 78, 27, 26, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 111, 13, 43, 44, 126, 28, 28, 28, 127, 45, 78, 78, 79, 78, 79, 79, 78, 79, 95, 79, 95, 79, 78, 79, 11, 12, 13, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 10, 10, 10 }
layers[0][12] = { 78, 78, 78, 27, 26, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 30, 77, 26, 111, 13, 78, 43, 44, 44, 44, 45, 11, 12, 13, 79, 79, 79, 95, 79, 78, 79, 79, 78, 79, 95, 79, 43, 126, 111, 12, 12, 13, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78 }
layers[0][13] = { 78, 78, 78, 27, 26, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 77, 127, 126, 111, 13, 11, 12, 12, 13, 11, 110, 10, 111, 12, 12, 13, 79, 78, 79, 79, 79, 79, 95, 79, 78, 78, 43, 44, 126, 28, 111, 13, 78, 78, 78, 78, 95, 95, 78, 78, 78, 78, 78, 78 }
layers[0][14] = { 42, 78, 78, 43, 126, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 30, 77, 111, 110, 28, 111, 110, 59, 61, 111, 110, 10, 10, 10, 42, 42, 111, 13, 79, 78, 79, 79, 95, 79, 95, 78, 79, 95, 78, 43, 44, 44, 45, 78, 95, 78, 95, 95, 79, 78, 78, 78, 78, 78, 79 }
layers[0][15] = { 42, 42, 78, 78, 27, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 47, 61, 59, 60, 60, 60, 46, 47, 60, 60, 61, 10, 42, 28, 42, 42, 29, 78, 78, 78, 78, 95, 78, 95, 95, 95, 95, 79, 95, 79, 78, 79, 78, 79, 79, 79, 95, 78, 78, 78, 78, 78, 78, 78 }
layers[0][16] = { 126, 42, 78, 78, 27, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 15, 77, 91, 62, 76, 76, 31, 76, 76, 14, 47, 61, 127, 126, 28, 127, 45, 79, 78, 95, 95, 95, 78, 79, 95, 79, 79, 78, 79, 78, 79, 78, 79, 79, 11, 12, 13, 78, 11, 12, 13, 78, 78, 78 }
layers[0][17] = { 27, 42, 78, 11, 110, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 31, 30, 47, 61, 91, 62, 76, 76, 76, 30, 76, 31, 77, 111, 110, 28, 29, 79, 79, 95, 79, 79, 79, 11, 13, 78, 95, 95, 95, 95, 78, 79, 79, 79, 79, 43, 44, 45, 11, 110, 28, 111, 12, 12, 12 }
layers[0][18] = { 27, 42, 78, 43, 126, 91, 62, 76, 76, 15, 31, 30, 76, 30, 76, 15, 63, 62, 77, 10, 91, 92, 92, 62, 76, 76, 15, 77, 28, 28, 28, 29, 11, 12, 12, 12, 12, 12, 110, 111, 12, 12, 12, 12, 13, 95, 78, 11, 13, 78, 79, 11, 12, 110, 28, 28, 28, 28, 28, 28 }
layers[0][19] = { 110, 78, 78, 78, 43, 126, 91, 92, 92, 62, 63, 92, 92, 92, 62, 63, 93, 91, 93, 42, 10, 127, 126, 91, 62, 76, 76, 77, 28, 28, 28, 111, 110, 28, 28, 28, 42, 28, 42, 28, 28, 42, 42, 28, 111, 12, 12, 110, 111, 12, 12, 110, 28, 28, 127, 44, 44, 44, 44, 44 }
layers[0][20] = { 78, 78, 78, 78, 78, 43, 44, 44, 126, 10, 42, 26, 127, 126, 26, 28, 42, 26, 42, 26, 42, 111, 110, 26, 75, 76, 76, 77, 28, 127, 44, 126, 28, 28, 10, 28, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 42, 42, 127, 126, 29, 78, 78, 78, 78, 78 }
layers[0][21] = { 78, 78, 78, 78, 78, 78, 78, 78, 43, 126, 42, 42, 29, 43, 126, 28, 42, 26, 26, 42, 26, 28, 127, 126, 75, 76, 76, 77, 28, 29, 78, 27, 28, 42, 42, 28, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 42, 42, 42, 111, 110, 111, 13, 78, 78, 78, 78 }
layers[0][22] = { 78, 78, 78, 78, 78, 78, 78, 78, 11, 110, 42, 26, 111, 12, 110, 26, 127, 44, 126, 42, 10, 127, 45, 27, 75, 76, 76, 77, 127, 45, 11, 110, 28, 28, 28, 28, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 28, 10, 10, 28, 111, 78, 78, 78, 78 }
layers[0][23] = { 78, 78, 78, 78, 78, 78, 78, 78, 43, 44, 44, 44, 44, 126, 42, 42, 111, 12, 110, 42, 26, 29, 78, 27, 75, 76, 76, 77, 29, 11, 110, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 28, 28, 78, 127, 44, 44, 44 }
layers[0][24] = { 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 43, 44, 44, 126, 42, 26, 127, 44, 45, 11, 110, 75, 76, 76, 77, 29, 27, 28, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 77, 28, 28, 78, 111, 13, 78, 78 }
layers[0][25] = { 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 11, 13, 78, 78, 78, 43, 126, 127, 45, 95, 78, 27, 26, 75, 14, 76, 77, 29, 43, 126, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 77, 28, 28, 78, 10, 111, 13, 78 }
layers[0][26] = { 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 43, 45, 78, 78, 78, 78, 43, 45, 78, 11, 12, 110, 26, 75, 76, 31, 77, 29, 11, 110, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 77, 28, 28, 78, 10, 10, 29, 78 }
layers[0][27] = { 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 13, 78, 78, 78, 78, 78, 78, 78, 78, 78, 27, 26, 26, 26, 75, 15, 76, 77, 111, 110, 26, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 77, 28, 127, 78, 10, 10, 29, 78 }
layers[0][28] = { 78, 11, 12, 78, 78, 318, 319, 78, 78, 28, 111, 13, 78, 10, 10, 78, 78, 78, 78, 78, 27, 127, 126, 28, 91, 92, 92, 93, 28, 127, 126, 75, 30, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 77, 127, 45, 78, 10, 10, 29, 78 }
layers[0][29] = { 78, 27, 59, 60, 78, 334, 335, 78, 78, 28, 127, 45, 78, 10, 10, 78, 78, 78, 78, 11, 110, 111, 110, 28, 28, 28, 26, 26, 127, 45, 27, 91, 62, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 77, 29, 78, 78, 78, 10, 111, 13 }
layers[0][30] = { 78, 27, 75, 15, 76, 350, 351, 78, 42, 42, 29, 78, 78, 26, 78, 78, 78, 78, 11, 110, 28, 28, 26, 28, 127, 44, 126, 127, 45, 78, 43, 126, 91, 62, 76, 31, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 77, 29, 78, 78, 78, 78, 10, 29 }
layers[0][31] = { 78, 27, 75, 76, 15, 30, 31, 77, 42, 127, 45, 78, 78, 78, 78, 78, 78, 78, 27, 28, 26, 127, 44, 44, 45, 78, 43, 45, 78, 78, 78, 43, 126, 75, 76, 76, 14, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 77, 29, 78, 78, 78, 78, 78, 111 }
layers[0][32] = { 78, 27, 91, 92, 62, 76, 14, 77, 42, 111, 13, 78, 78, 78, 78, 78, 78, 11, 110, 26, 127, 45, 78, 78, 11, 13, 78, 78, 78, 78, 78, 78, 27, 91, 92, 92, 62, 31, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 77, 111, 13, 78, 78, 78, 78, 78 }
layers[0][33] = { 78, 43, 44, 126, 91, 62, 76, 63, 42, 10, 111, 12, 13, 78, 78, 78, 11, 110, 28, 127, 45, 78, 78, 78, 43, 45, 78, 78, 78, 78, 78, 78, 43, 44, 44, 126, 75, 15, 31, 76, 76, 76, 76, 76, 76, 76, 318, 319, 76, 76, 76, 76, 77, 26, 29, 78, 78, 78, 78, 78 }
layers[0][34] = { 78, 78, 78, 27, 42, 91, 92, 93, 42, 42, 28, 28, 111, 12, 13, 11, 110, 28, 127, 45, 78, 78, 10, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 27, 75, 76, 76, 76, 76, 76, 76, 14, 14, 14, 334, 335, 14, 76, 76, 76, 77, 26, 111, 13, 78, 78, 78, 78 }
layers[0][35] = { 78, 78, 78, 43, 126, 127, 126, 42, 42, 42, 10, 42, 10, 42, 111, 110, 127, 44, 45, 78, 78, 127, 126, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 11, 13, 27, 91, 92, 62, 30, 76, 76, 76, 76, 76, 14, 350, 351, 76, 76, 76, 14, 77, 28, 26, 111, 13, 78, 78, 78 }
layers[0][36] = { 78, 78, 78, 78, 43, 45, 43, 126, 42, 127, 44, 44, 44, 44, 44, 44, 45, 78, 78, 78, 78, 29, 43, 126, 78, 78, 78, 78, 78, 78, 78, 78, 11, 110, 29, 27, 26, 26, 75, 76, 76, 31, 76, 76, 76, 76, 76, 76, 76, 76, 15, 31, 77, 28, 127, 44, 45, 78, 78, 78 }
layers[0][37] = { 126, 78, 78, 78, 78, 78, 78, 43, 44, 45, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 111, 13, 27, 42, 13, 78, 78, 78, 78, 78, 78, 43, 44, 45, 43, 126, 26, 75, 76, 30, 76, 76, 14, 63, 92, 92, 92, 92, 92, 92, 92, 93, 127, 45, 78, 78, 78, 78, 78 }
layers[0][38] = { 43, 126, 42, 42, 78, 78, 78, 78, 78, 78, 78, 78, 11, 13, 78, 78, 78, 78, 78, 78, 42, 28, 111, 110, 127, 44, 126, 78, 78, 78, 78, 78, 78, 78, 78, 78, 27, 26, 91, 92, 92, 92, 92, 92, 93, 10, 127, 44, 44, 44, 44, 44, 44, 45, 78, 78, 78, 78, 78, 78 }
layers[0][39] = { 78, 43, 44, 44, 126, 42, 78, 78, 78, 78, 78, 78, 43, 45, 78, 78, 78, 78, 78, 42, 42, 28, 28, 28, 29, 78, 43, 126, 78, 78, 78, 78, 78, 78, 78, 78, 43, 126, 26, 42, 26, 42, 26, 127, 44, 44, 45, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 28 }

layers[1] = {}
layers[1].type = "ground"
layers[1].name = "Ground 2"
layers[1][0] = { -1, -1, -1, -1, 249, 250, -1, -1, -1, -1, 233, 234, -1, -1, -1, -1, -1, -1, -1, 57, 144, -1, 64, 65, 68, 69, 96, 97, 98, 99, 86, 87, 82, 83, 70, 71, 66, 67, 66, 67, 66, 67, 54, -1, -1, 57, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[1][1] = { 66, 67, 66, 67, 54, -1, -1, -1, -1, -1, 249, 250, -1, -1, 235, -1, -1, 57, 72, 73, 160, 161, 80, 81, 84, 85, -1, -1, -1, -1, 102, 103, 98, 99, 86, 87, 82, 83, 82, 83, 82, 83, 70, 71, 72, 73, 70, 71, 66, 67, 66, 67, 54, -1, -1, -1, -1, -1, -1, -1 }
layers[1][2] = { 82, 83, 82, 83, 70, 71, 144, -1, -1, -1, -1, 252, -1, -1, 251, -1, 72, 73, 88, 89, 176, 177, 96, 97, 100, 101, -1, -1, -1, -1, -1, 251, -1, -1, 102, 103, 98, 99, 98, 99, 98, 99, 86, 87, 88, 89, 86, 87, 82, 83, 82, 83, 70, 71, 144, -1, -1, -1, -1, -1 }
layers[1][3] = { 98, 99, 98, 99, 86, 87, 160, 161, 252, -1, -1, -1, -1, -1, 194, 195, 88, 89, 104, 105, 64, 65, 66, 67, 54, -1, -1, -1, -1, -1, -1, -1, -1, 57, 66, 67, 66, 67, 66, 67, 54, -1, 102, 103, 104, 105, 102, 103, 98, 99, 98, 99, 86, 87, 160, 161, -1, -1, -1, -1 }
layers[1][4] = { -1, 78, -1, -1, 102, 103, 176, 177, -1, 57, 66, 67, 66, 67, 210, 211, 104, 105, -1, -1, 80, 81, 82, 83, 70, 71, 252, -1, 247, 248, 66, 67, 72, 73, 82, 83, 82, 83, 82, 83, 70, 71, -1, -1, -1, -1, -1, 249, 250, -1, -1, -1, 102, 103, 176, 177, -1, -1, -1, -1 }
layers[1][5] = { 78, -1, -1, -1, -1, -1, 64, 65, 72, 73, 82, 83, 82, 83, 226, 227, -1, -1, -1, -1, 96, 97, 98, 99, 86, 87, 192, 193, 194, 195, 82, 83, 88, 89, 98, 99, 98, 99, 98, 99, 86, 87, 192, 193, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, 33, -1, -1, -1, -1 }
layers[1][6] = { -1, 79, -1, -1, -1, -1, 80, 81, 88, 89, 98, 99, 98, 99, 242, 243, -1, -1, -1, -1, -1, -1, -1, -1, 102, 103, 208, 209, 210, 211, 98, 99, 104, 105, -1, -1, -1, -1, -1, -1, 102, 103, 208, 209, 66, 67, 54, -1, -1, -1, -1, -1, -1, -1, 48, 49, -1, -1, -1, -1 }
layers[1][7] = { 95, -1, -1, -1, -1, -1, 96, 97, 104, 105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 224, 225, 226, 227, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 224, 225, 82, 83, 70, 71, 66, 67, 144, -1, -1, -1, 64, 65, 144, -1, -1, -1 }
layers[1][8] = { 37, 94, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 240, 241, 242, 243, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 240, 241, 98, 99, 86, 87, 82, 83, 160, 161, -1, -1, 80, 81, 192, 193, -1, -1 }
layers[1][9] = { 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 102, 103, 98, 99, 176, 177, -1, -1, 96, 97, 208, 209, 66, 67 }
layers[1][10] = { 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 49, -1, -1, -1, -1, 224, 225, 82, 83 }
layers[1][11] = { -1, 37, -1, -1, -1, -1, -1, -1, 290, 291, 292, 293, 294, 295, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 65, 66, 67, 66, 67, 54, 241, 98, 99 }
layers[1][12] = { -1, 53, -1, -1, -1, -1, -1, 305, 306, 307, 308, 309, 310, 311, 312, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, 81, 82, 83, 82, 83, 70, 71, 66, 67 }
layers[1][13] = { -1, 115, 4, -1, -1, -1, -1, 321, 322, 323, 324, 325, 326, 327, 328, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 96, 97, 98, 99, 98, 99, 86, 87, 82, 83 }
layers[1][14] = { -1, -1, 20, 21, -1, -1, -1, 337, 338, 339, 268, 269, 342, 343, 344, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 102, 103, 98, 99 }
layers[1][15] = { -1, -1, 36, 37, -1, -1, -1, 353, 354, 355, 284, 285, 358, 359, 360, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[1][16] = { -1, -1, 52, 53, -1, -1, 368, 369, 370, 371, 300, 301, 374, 375, 376, 377, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[1][17] = { -1, -1, 36, 37, -1, -1, 384, 385, 386, 387, 316, 317, 390, 391, 392, 393, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[1][18] = { -1, -1, 52, 53, -1, -1, -1, 401, 402, 403, 404, 405, 406, 407, 408, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[1][19] = { -1, 147, 68, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[1][20] = { 162, 163, 84, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[1][21] = { 178, 179, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 289, 290, 291, 292, 293, 292, 293, 294, 294, 292, 293, 292, 293, 292, 293, 294, 295, -1, -1, -1, -1, -1, 1, 2, 3, 2, 3 }
layers[1][22] = { 163, 69, -1, -1, -1, 292, 293, 294, 295, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 305, 306, 307, 308, 309, 512, 513, 516, 310, 308, 309, 308, 309, 308, 309, 310, 311, 312, -1, -1, -1, 16, 17, 18, 19, 18, 19 }
layers[1][23] = { 179, 85, -1, -1, 307, 308, 309, 310, 311, 312, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 321, 322, 323, 324, 325, 324, 529, 530, 531, 292, 325, 324, 325, 324, 325, 326, 327, 328, -1, -1, -1, 32, 33, -1, -1, -1, -1 }
layers[1][24] = { 37, -1, -1, 322, 323, 324, 325, 326, 327, 328, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 337, 418, 419, 266, 267, 544, 545, 546, 547, 308, 309, 308, 309, 308, 309, 310, 311, 312, -1, -1, -1, 48, 49, -1, -1, -1, -1 }
layers[1][25] = { 53, -1, 417, 418, 419, 270, 271, 422, 423, 424, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 433, 434, 435, 282, 283, 560, 561, 562, 563, 324, 325, 324, 325, 324, 325, 326, 327, 328, -1, -1, -1, 32, 33, -1, 196, 197, 198 }
layers[1][26] = { 69, -1, 433, 434, 435, 286, 287, 438, 439, 440, -1, -1, -1, 2, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 449, 450, 451, 298, 299, 576, 577, 578, 579, 308, 309, 308, 309, 308, 309, 310, 311, 312, -1, -1, -1, 48, 49, -1, 228, 229, 230 }
layers[1][27] = { 85, -1, 449, 450, 451, 302, 303, 454, 455, 456, -1, -1, 17, 18, 19, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 466, 467, 314, 315, 592, 593, 594, 595, 324, 325, 324, 325, 324, 325, 326, 327, 328, -1, -1, -1, 32, 33, -1, 244, 245, 246 }
layers[1][28] = { -1, -1, 465, 466, 467, 366, 367, 470, 471, 472, -1, 48, 49, -1, -1, 36, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 481, 482, 483, 330, 331, 609, 305, 306, 307, 308, 309, 308, 309, 308, 309, 310, 311, 312, -1, -1, -1, 48, 49, -1, -1, -1, -1 }
layers[1][29] = { -1, -1, 481, 482, 483, 382, 383, 486, 487, 488, -1, 32, 33, -1, -1, 52, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 497, 498, 499, 346, 347, 625, 321, 322, 323, 324, 325, 324, 325, 324, 325, 326, 327, 328, -1, -1, -1, 64, 65, 144, -1, -1, -1 }
layers[1][30] = { -1, -1, 497, 498, 499, 398, 399, 502, 503, 504, -1, 48, 49, -1, 57, 68, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 417, 418, 419, 266, 267, 420, 421, 270, 271, 422, 423, 424, -1, -1, -1, 80, 81, 192, 193, -1, -1 }
layers[1][31] = { 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 65, 72, 73, 84, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 433, 434, 435, 282, 283, 436, 437, 286, 287, 438, 439, 440, -1, -1, -1, 96, 97, 208, 209, 144, -1 }
layers[1][32] = { 252, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, 81, 88, 89, 100, 101, -1, -1, -1, -1, -1, 17, 20, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 449, 450, 451, 298, 299, 452, 453, 302, 303, 454, 455, 456, -1, -1, -1, -1, -1, 224, 225, 160, 161 }
layers[1][33] = { 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 96, 97, 104, 105, -1, -1, -1, -1, -1, -1, 112, -1, 36, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 465, 466, 467, 314, 315, 468, 469, 366, 367, 470, 471, 472, -1, -1, -1, -1, -1, 240, 241, 176, 177 }
layers[1][34] = { 36, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 52, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 481, 482, 483, 330, 331, 484, 485, 382, 383, 486, 487, 488, -1, -1, -1, -1, -1, -1, -1, 32, 33 }
layers[1][35] = { 52, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, 33, -1, -1, -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 497, 498, 499, 346, 347, 500, 501, 398, 399, 502, 503, 504, -1, -1, -1, -1, -1, -1, -1, 48, 49 }
layers[1][36] = { 114, 115, 2, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 49, -1, -1, -1, 131, 24, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, 33 }
layers[1][37] = { -1, -1, -1, -1, -1, 25, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 112, -1, -1, -1, -1, -1, 40, 41, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, 49 }
layers[1][38] = { -1, -1, -1, -1, -1, -1, -1, 25, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, 112, -1, -1, -1, -1, -1, -1, -1, -1, 114, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 112, 113 }
layers[1][39] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, 32, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, 131, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 17, 128, -1 }

layers[2] = {}
layers[2].type = "sky"
layers[2].name = "Sky"
layers[2][0] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][1] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 235, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 215, 216, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][2] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 215, 216, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 231, 232, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][3] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 231, 232, -1, -1, -1, -1, -1, -1, 252, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 233, 234, -1, -1, 196, 197, 198, -1, -1, -1, -1, -1, -1 }
layers[2][4] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 212, 213, 214, -1, -1, -1, -1, -1, -1 }
layers[2][5] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 228, 229, 230, -1, -1, 215, 216, -1, -1 }
layers[2][6] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 252, -1, -1, -1, 244, 245, 246, -1, -1, 231, 232, -1, -1 }
layers[2][7] = { 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 247, 248, -1, -1 }
layers[2][8] = { 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][9] = { 53, -1, -1, -1, -1, -1, -1, 257, 258, -1, 260, 261, -1, 263, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][10] = { 115, 21, -1, -1, -1, -1, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][11] = { 36, 37, -1, -1, -1, -1, 288, 289, -1, -1, -1, -1, -1, -1, 296, 297, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 240, -1, -1, -1 }
layers[2][12] = { 52, 53, -1, -1, -1, -1, 304, 305, -1, -1, -1, -1, -1, -1, 312, 313, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][13] = { 114, 115, 4, -1, -1, -1, 320, 321, -1, -1, -1, -1, -1, -1, 328, 329, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][14] = { -1, 131, 20, 21, -1, -1, 336, 337, -1, -1, -1, -1, -1, -1, 344, 345, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][15] = { -1, -1, -1, -1, -1, -1, 352, 353, -1, -1, -1, -1, -1, -1, 360, 361, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][16] = { -1, -1, -1, -1, -1, -1, 368, -1, -1, -1, -1, -1, -1, -1, -1, 377, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][17] = { -1, -1, -1, -1, -1, -1, 384, -1, -1, -1, -1, -1, -1, -1, -1, 393, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][18] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][19] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 257, 258, -1, 260, 261, 260, 261, -1, -1, 260, 261, 260, 261, 260, 261, -1, 263, 264, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][20] = { -1, -1, 257, 258, -1, 260, 261, -1, 263, 264, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 272, 273, 274, 275, 276, 277, 276, 277, 278, 278, 276, 277, 276, 277, 276, 277, 278, 279, 280, 281, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][21] = { -1, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 288, 289, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 296, 297, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][22] = { -1, 288, 289, 290, 291, -1, -1, -1, -1, 296, 297, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 304, 305, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 312, 313, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][23] = { -1, 304, 305, 306, -1, -1, -1, -1, -1, 312, 313, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 320, 321, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 328, 329, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][24] = { -1, 320, 321, -1, -1, -1, -1, -1, -1, 328, 329, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 336, 337, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 312, 313, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][25] = { -1, 416, 337, -1, -1, -1, -1, -1, -1, 344, 425, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 352, 353, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 328, 329, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][26] = { -1, 432, 353, -1, -1, -1, -1, -1, -1, 360, 441, -1, 1, 2, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 448, 369, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 312, 313, -1, -1, -1, 215, 216, -1, -1, -1 }
layers[2][27] = { -1, 448, -1, -1, -1, -1, -1, -1, -1, -1, 457, 16, 17, 18, 19, 20, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 464, 465, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 328, 329, -1, -1, -1, 231, 232, -1, -1, -1 }
layers[2][28] = { -1, 464, -1, -1, -1, -1, -1, -1, -1, -1, 473, -1, 252, 215, 216, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 336, 305, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 312, 313, -1, -1, -1, 247, 248, -1, -1, -1 }
layers[2][29] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 231, 232, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 352, 321, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 328, 329, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][30] = { 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 247, 248, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 416, 337, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 344, 425, -1, -1, -1, -1, -1, 252, -1, -1 }
layers[2][31] = { 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 432, 353, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 360, 441, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][32] = { 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 17, 20, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 448, 369, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 376, 457, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][33] = { 115, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 112, 113, 36, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 464, 465, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 472, 473, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][34] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 17, 128, -1, 52, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][35] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, 114, 115, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][36] = { -1, 115, 2, 3, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, 131, 24, 25, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][37] = { -1, 131, 18, 19, 24, 25, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 112, 113, -1, -1, -1, -1, -1, -1, 20, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][38] = { -1, -1, -1, -1, 40, 41, 24, 25, 4, -1, -1, -1, -1, -1, -1, -1, -1, 16, 17, 128, 196, 197, 198, -1, -1, -1, -1, -1, 115, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
layers[2][39] = { -1, -1, -1, -1, -1, -1, 40, 41, 20, 21, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, 212, 213, 214, -1, -1, -1, -1, -1, -1, 20, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }


-- Valyria Tear map editor end. Do not edit this line. Place your scripts after this line. --

local bronann = {};
local kalya = {};

-- Main npcs
local orlinn = {};
local georges = {};

-- special objets
local blocking_rock = {};

-- the main map loading code
function Load(m)

	Map = m;
	ObjectManager = Map.object_supervisor;
	DialogueManager = Map.dialogue_supervisor;
	EventManager = Map.event_supervisor;
	GlobalEvents = Map.map_event_group;

	Map.unlimited_stamina = true;

	CreateCharacters();
	-- Set the camera focus on Bronann
	Map:SetCamera(bronann);

	CreateNPCs();
	CreateObjects();

	CreateEvents();
	CreateZones();
end

function Update()
	-- Check whether the character is in one of the zones
	CheckZones();
end


-- Character creation
function CreateCharacters()
	bronann = _CreateSprite(Map, "Bronann", 12, 63);
	bronann:SetDirection(hoa_map.MapMode.SOUTH);
	bronann:SetMovementSpeed(hoa_map.MapMode.NORMAL_SPEED);
	bronann:SetNoCollision(false);

	-- set up the position according to the previous map
	if (GlobalManager:GetPreviousLocation() == "from_riverbank") then
		bronann:SetPosition(30, 77);
		bronann:SetDirection(hoa_map.MapMode.NORTH);
	end

	-- set up the position according to the previous map
	if (GlobalManager:GetPreviousLocation() == "from_village_south") then
		bronann:SetPosition(79, 77);
		bronann:SetDirection(hoa_map.MapMode.NORTH);
	end

	-- set up the position according to the previous map
	if (GlobalManager:GetPreviousLocation() == "from_kalya_house_path") then
		bronann:SetPosition(3, 11);
		bronann:SetDirection(hoa_map.MapMode.EAST);
	end

	-- set up the position according to the previous map
	if (GlobalManager:GetPreviousLocation() == "from_shop") then
		bronann:SetPosition(94, 72);
		bronann:SetDirection(hoa_map.MapMode.SOUTH);
	end

	-- set up the position according to the previous map
	if (GlobalManager:GetPreviousLocation() == "from_secret_path") then
		bronann:SetPosition(3, 60);
		bronann:SetDirection(hoa_map.MapMode.EAST);
	end

	Map:AddGroundObject(bronann);
end

function CreateNPCs()
	local npc = {}
	local text = {}
	local dialogue = {}
	local event = {}

	kalya = _CreateSprite(Map, "Kalya", 42, 18);
	Map:AddGroundObject(kalya);
	event = hoa_map.RandomMoveSpriteEvent("Kalya random move", kalya, 1000, 2000);
	event:AddEventLinkAtEnd("Kalya random move", 2000); -- Loop on itself
	EventManager:RegisterEvent(event);
	EventManager:StartEvent("Kalya random move");
	dialogue = hoa_map.SpriteDialogue();
	text = hoa_system.Translate("Please, leave me alone, Bronann...");
	dialogue:AddLine(text, kalya);
	DialogueManager:AddDialogue(dialogue);
	kalya:AddDialogueReference(dialogue);

	orlinn = _CreateSprite(Map, "Orlinn", 40, 18);
	Map:AddGroundObject(orlinn);
	-- Setup Orlinn's state and dialogue depending on the story current context
    _UpdateOrlinnState();

	npc = _CreateNPCSprite(Map, "Girl1", "Olivia", 50, 55);
	Map:AddGroundObject(npc);
	event = hoa_map.RandomMoveSpriteEvent("Olivia random move", npc, 8000, 2000);
	event:AddEventLinkAtEnd("Olivia random move", 5000); -- Loop on itself
	EventManager:RegisterEvent(event);
	EventManager:StartEvent("Olivia random move");
	dialogue = hoa_map.SpriteDialogue();
	text = hoa_system.Translate("Hi Bronann!");
	dialogue:AddLine(text, npc);
	DialogueManager:AddDialogue(dialogue);
	npc:AddDialogueReference(dialogue);

	npc = _CreateNPCSprite(Map, "Old Woman1", "Brymir", 72, 64);
	Map:AddGroundObject(npc);
	npc:SetDirection(hoa_map.MapMode.WEST);
	dialogue = hoa_map.SpriteDialogue();
	text = hoa_system.Translate("Ahh sure! (gossip, gossip)");
	dialogue:AddLine(text, npc);
	DialogueManager:AddDialogue(dialogue);
	npc:AddDialogueReference(dialogue);

	npc = _CreateNPCSprite(Map, "Woman1", "Martha", 70, 64);
	Map:AddGroundObject(npc);
	npc:SetDirection(hoa_map.MapMode.EAST);
	dialogue = hoa_map.SpriteDialogue();
	text = hoa_system.Translate("Did you hear that? (gossip, gossip)");
	dialogue:AddLine(text, npc);
	DialogueManager:AddDialogue(dialogue);
	npc:AddDialogueReference(dialogue);

	npc = _CreateNPCSprite(Map, "Woman2", "Sophia", 22, 38);
	Map:AddGroundObject(npc);
	npc:SetDirection(hoa_map.MapMode.SOUTH);
	dialogue = hoa_map.SpriteDialogue();
	text = hoa_system.Translate("You're too young to trade stuff with me!");
	dialogue:AddLine(text, npc);
	DialogueManager:AddDialogue(dialogue);
	npc:AddDialogueReference(dialogue);

	npc = _CreateNPCSprite(Map, "Man2", "Xandar", 116, 38);
	Map:AddGroundObject(npc);
	npc:SetDirection(hoa_map.MapMode.WEST);
	dialogue = hoa_map.SpriteDialogue();
	text = hoa_system.Translate("You'd better not go there. The forest can be dangerous for an untrained kid.");
	dialogue:AddLine(text, npc);
	DialogueManager:AddDialogue(dialogue);
	npc:AddDialogueReference(dialogue);

	georges = _CreateNPCSprite(Map, "Man1", "Georges", 32, 76);
	Map:AddGroundObject(georges);
	georges:SetDirection(hoa_map.MapMode.WEST);
	_UpdateGeorgesDialogue(georges);

end

function CreateObjects()
	local object = {}

	object = _CreateObject(Map, "Tree Big2", 22, 78);
	if (object ~= nil) then Map:AddGroundObject(object) end;
	object = _CreateObject(Map, "Tree Small1", 22, 16);
	if (object ~= nil) then Map:AddGroundObject(object) end;
	object = _CreateObject(Map, "Tree Big1", 9, 16);
	if (object ~= nil) then Map:AddGroundObject(object) end;
	object = _CreateObject(Map, "Tree Big1", 65, 18);
	if (object ~= nil) then Map:AddGroundObject(object) end;
	object = _CreateObject(Map, "Tree Big2", 74, 20);
	if (object ~= nil) then Map:AddGroundObject(object) end;
	object = _CreateObject(Map, "Tree Big1", 67, 32);
	if (object ~= nil) then Map:AddGroundObject(object) end;
	object = _CreateObject(Map, "Tree Big2", 80, 36);
	if (object ~= nil) then Map:AddGroundObject(object) end;
	object = _CreateObject(Map, "Tree Small1", 92, 22);
	if (object ~= nil) then Map:AddGroundObject(object) end;
	object = _CreateObject(Map, "Tree Big2", 98, 24);
	if (object ~= nil) then Map:AddGroundObject(object) end;
	object = _CreateObject(Map, "Tree Small2", 79, 16);
	if (object ~= nil) then Map:AddGroundObject(object) end;

	object = _CreateObject(Map, "Rock1", 3, 64);
	if (object ~= nil) then Map:AddGroundObject(object) end;
	object = _CreateObject(Map, "Rock2", 2, 62);
	if (object ~= nil) then Map:AddGroundObject(object) end;
	object = _CreateObject(Map, "Rock1", 33, 12);
	if (object ~= nil) then Map:AddGroundObject(object) end;

	object = _CreateObject(Map, "Rock2", 29, 16);
	if (object ~= nil) then Map:AddGroundObject(object) end;
	object = _CreateObject(Map, "Rock2", 109, 34);
	if (object ~= nil) then Map:AddGroundObject(object) end;
	object = _CreateObject(Map, "Rock2", 113, 34);
	if (object ~= nil) then Map:AddGroundObject(object) end;
	object = _CreateObject(Map, "Rock2", 117, 34);
	if (object ~= nil) then Map:AddGroundObject(object) end;
	object = _CreateObject(Map, "Rock2", 109, 42);
	if (object ~= nil) then Map:AddGroundObject(object) end;
	object = _CreateObject(Map, "Rock2", 117, 42);
	if (object ~= nil) then Map:AddGroundObject(object) end;
	object = _CreateObject(Map, "Rock2", 113, 42);
	if (object ~= nil) then Map:AddGroundObject(object) end;

	-- Create the special rock
	blocking_rock = _CreateObject(Map, "Rock1", 7, 45);
	Map:AddGroundObject(blocking_rock);
	-- Set the rock state based on the story point
	_UpdateBlockingRock();
end

-- Creates all events and sets up the entire event sequence chain
function CreateEvents()
	local event = {};

    -- Triggered Events
	event = hoa_map.MapTransitionEvent("to Bronann's home", "dat/maps/vt_bronanns_home.lua", "from_village_center");
	EventManager:RegisterEvent(event);

	event = hoa_map.MapTransitionEvent("to Riverbank", "dat/maps/vt_layna_riverbank.lua", "from_village_center");
	EventManager:RegisterEvent(event);

	event = hoa_map.MapTransitionEvent("to Village south entrance", "dat/maps/vt_layna_south_entrance.lua", "from_village_center");
	EventManager:RegisterEvent(event);

	event = hoa_map.MapTransitionEvent("to Kalya house path", "dat/maps/vt_kalya_house_path.lua", "from_village_center");
	EventManager:RegisterEvent(event);

	event = hoa_map.MapTransitionEvent("to Flora's Shop", "dat/maps/vt_layna_center_shop.lua", "from_village_center");
	EventManager:RegisterEvent(event);

	event = hoa_map.MapTransitionEvent("to secret cliff", "dat/maps/vt_layna_riverbank.lua", "from_secret_path");
	EventManager:RegisterEvent(event);

    -- Quest events
    -- Georges
    event = hoa_map.ScriptedEvent("Quest1: GeorgesDialogueDone", "Quest1GeorgesDialogueDone", "");
	EventManager:RegisterEvent(event);

    -- Orlinn
    event = hoa_map.ScriptedEvent("Quest1: Make Orlinn run and hide", "Quest1OrlinnRunAndHide", "");
    event:AddEventLinkAtEnd("Quest1: Make Orlinn run");
    EventManager:RegisterEvent(event);

    event = hoa_map.PathMoveSpriteEvent("Quest1: Make Orlinn run", orlinn, 30, 79, true);
    event:AddEventLinkAtEnd("Quest1: Make Orlinn disappear");
    EventManager:RegisterEvent(event);

    event = hoa_map.ScriptedSpriteEvent("Quest1: Make Orlinn disappear", orlinn, "MakeInvisible", "");
    EventManager:RegisterEvent(event);

    -- Georges event
    event = hoa_map.ScriptedEvent("Quest1: Georges whom the barley meal was for", "Quest1GeorgesTellsBronannAboutLilly", "");
    EventManager:RegisterEvent(event);
end

function CreateZones()
	-- N.B.: left, right, top, bottom
	bronanns_home_entrance_zone = hoa_map.CameraZone(10, 14, 60, 61, hoa_map.MapMode.CONTEXT_01);
	Map:AddZone(bronanns_home_entrance_zone);

	to_riverbank_zone = hoa_map.CameraZone(19, 35, 78, 79, hoa_map.MapMode.CONTEXT_01);
	Map:AddZone(to_riverbank_zone);

	to_village_entrance_zone = hoa_map.CameraZone(60, 113, 78, 79, hoa_map.MapMode.CONTEXT_01);
	Map:AddZone(to_village_entrance_zone);

	to_kalya_house_path_zone = hoa_map.CameraZone(0, 1, 8, 15, hoa_map.MapMode.CONTEXT_01);
	Map:AddZone(to_kalya_house_path_zone);

	shop_entrance_zone = hoa_map.CameraZone(92, 96, 70, 71, hoa_map.MapMode.CONTEXT_01);
	Map:AddZone(shop_entrance_zone);

	secret_path_zone = hoa_map.CameraZone(0, 1, 55, 61, hoa_map.MapMode.CONTEXT_01);
	Map:AddZone(secret_path_zone);
end

function CheckZones()
	if (bronanns_home_entrance_zone:IsCameraEntering() == true) then
		-- Stop the character as it may walk in diagonal, which is looking strange
		-- when entering
		bronann:SetMoving(false);
		EventManager:StartEvent("to Bronann's home");
	end

	if (to_riverbank_zone:IsCameraEntering() == true) then
		-- Stop the character as it may walk in diagonal, which is looking strange
		-- when entering
		bronann:SetMoving(false);
		EventManager:StartEvent("to Riverbank");
	end

	if (to_village_entrance_zone:IsCameraEntering() == true) then
		-- Stop the character as it may walk in diagonal, which is looking strange
		-- when entering
		bronann:SetMoving(false);
		EventManager:StartEvent("to Village south entrance");
	end

	if (to_kalya_house_path_zone:IsCameraEntering() == true) then
		-- Stop the character as it may walk in diagonal, which is looking strange
		-- when entering
		bronann:SetMoving(false);
		EventManager:StartEvent("to Kalya house path");
	end

	if (secret_path_zone:IsCameraEntering() == true) then
		-- Stop the character as it may walk in diagonal, which is looking strange
		-- when entering
		bronann:SetMoving(false);
		EventManager:StartEvent("to secret cliff");
	end

	if (shop_entrance_zone:IsCameraEntering() == true) then
		-- Stop the character as it may walk in diagonal, which is looking strange
		-- when entering
		bronann:SetMoving(false);
		EventManager:StartEvent("to Flora's Shop");
	end
end

-- Inner custom functions

-- Make the rock blocks the secret passage as long as the kid hasn't been found once.
function _UpdateBlockingRock()
    local village_entrance_group = GlobalManager:GetEventGroup("dat_maps_vt_layna_south_entrance_lua");
    if (village_entrance_group ~= nil
        and village_entrance_group:DoesEventExist("quest1_orlinn_hide_n_seek1_done") == true) then
        blocking_rock:SetNoCollision(true);
        blocking_rock:SetVisible(false);
    else
        blocking_rock:SetNoCollision(false);
        blocking_rock:SetVisible(true);
    end
end

-- Updates Georges dialogue depending on how far is the story going.
function _UpdateGeorgesDialogue()
	local text = {}
	local dialogue = {}

    georges:ClearDialogueReferences();

	local shop_event_group = GlobalManager:GetEventGroup("dat_maps_vt_layna_center_shop_lua");
    local riverbank_event_group = GlobalManager:GetEventGroup("dat_maps_vt_layna_riverbank_lua");
    if (GlobalEvents:DoesEventExist("quest1_pen_given_done") == true) then
        -- Quest 1 done as for Georges
        -- Default behaviour
    elseif (riverbank_event_group ~= nil
            and riverbank_event_group:DoesEventExist("quest1_orlinn_hide_n_seek3_done") == true) then
        -- Give the pen to Georges
        dialogue = hoa_map.SpriteDialogue();
        text = hoa_system.Translate("Here it is, Georges.");
        dialogue:AddLine(text, bronann);
        text = hoa_system.Translate("You're the nicest of all, Bronnan. I well tell everyone how brave you...");
        dialogue:AddLine(text, georges);
        text = hoa_system.Translate("(Sigh...) Georges!");
        dialogue:AddLine(text, bronann);
        text = hoa_system.Translate("Ok ok. Just having a bit of spirit, here, young man.");
        dialogue:AddLine(text, georges);
        text = hoa_system.Translate("In fact, the barley meal was for Lilly.");
        dialogue:AddLine(text, georges);
        text = hoa_system.Translate("!! What?");
        dialogue:AddLine(text, bronann);
        text = hoa_system.Translate("Don't thank me for that, it's my pleasure.");
        dialogue:AddLineEvent(text, georges, "Quest1: Georges whom the barley meal was for");
        DialogueManager:AddDialogue(dialogue);
        georges:AddDialogueReference(dialogue);
        return;
    elseif (GlobalEvents:DoesEventExist("quest1_georges_dialogue_done") == true) then
        -- Once talked to him after the shop conversation, just put the end of the dialogue
        dialogue = hoa_map.SpriteDialogue();
        text = hoa_system.Translate("You see, I lost my beloved pen. Was it near a tree or next to the waving child of the mountain snow?");
        dialogue:AddLine(text, georges);
        text = hoa_system.Translate("Shall you find it, I would be entrustfully obliged to you!");
        dialogue:AddLine(text, georges);
        text = hoa_system.Translate("(Sigh...) Hmm, ok.");
        dialogue:AddLine(text, bronann);
        DialogueManager:AddDialogue(dialogue);
        georges:AddDialogueReference(dialogue);
        return;
	elseif (shop_event_group ~= nil and shop_event_group:DoesEventExist("quest1_flora_dialogue_done") == true) then
        dialogue = hoa_map.SpriteDialogue();
        text = hoa_system.Translate("Hi Georges. Erm, I'm coming from the shop and I ...");
        dialogue:AddLine(text, bronann);
        text = hoa_system.Translate("Can you hear this?");
        dialogue:AddLine(text, georges);
        text = hoa_system.Translate("Erm, ... Well, I don't hear anything special...");
        dialogue:AddLine(text, bronann);
        text = hoa_system.Translate("That's the point! Can't you hear the magnificient sound of nature, so invisible to our used hears.");
        dialogue:AddLine(text, georges);
        text = hoa_system.Translate("Huh, please Georges, I wouldn't like to run away like the last time...");
        dialogue:AddLine(text, bronann);
        text = hoa_system.Translate("... The incredible and amazing, I could even say, stunning feel in in the wind...");
        dialogue:AddLine(text, georges);
        text = hoa_system.Translate("Georges, I simply wanted to ask you whether you had some barley meal left!");
        dialogue:AddLine(text, bronann);
        text = hoa_system.Translate("Ah I see, well unfortunately, I'm so much sad for the loss I just had, I can't tell you that with the right words.");
        dialogue:AddLine(text, georges);
        text = hoa_system.Translate("Huh?");
        dialogue:AddLine(text, bronann);
        text = hoa_system.Translate("You see, I lost my beloved pen. Was it near a tree or next to the waving child of the mountain snow?");
        dialogue:AddLine(text, georges);
        text = hoa_system.Translate("Shall you find it, I would be entrustfully obliged to you!");
        dialogue:AddLine(text, georges);
        text = hoa_system.Translate("(Sigh...) Hmm, ok.");
        dialogue:AddLineEvent(text, bronann, "Quest1: GeorgesDialogueDone");
        DialogueManager:AddDialogue(dialogue);
        georges:AddDialogueReference(dialogue);
        return;
    end

    dialogue = hoa_map.SpriteDialogue();
    text = hoa_system.Translate("Ah, the river is so beautiful at this time of the year. I feel like writing some poetry...");
    dialogue:AddLine(text, georges);
    DialogueManager:AddDialogue(dialogue);
    georges:AddDialogueReference(dialogue);
end

-- Updates Orlinn's dialogue and state depending on how far is the story going.
function _UpdateOrlinnState()
	local text = {};
	local dialogue = {};
    local event = {};

    orlinn:ClearDialogueReferences();
    local riverbank_event_group = GlobalManager:GetEventGroup("dat_maps_vt_layna_riverbank_lua");
    if (riverbank_event_group ~= nil
            and riverbank_event_group:DoesEventExist("quest1_orlinn_hide_n_seek3_done") == true) then
        -- Bronann got Georges' pen, update orlinn dialogue
        dialogue = hoa_map.SpriteDialogue();
        text = hoa_system.Translate("I promise I won't bother you again ...");
        dialogue:AddLine(text, orlinn);
        text = hoa_system.Translate("Don't worry for that, Orlinn, ok?");
        dialogue:AddLine(text, bronann);
        DialogueManager:AddDialogue(dialogue);
        orlinn:AddDialogueReference(dialogue);

        -- Update kalya's dialogue too
        kalya:ClearDialogueReferences();
        dialogue = hoa_map.SpriteDialogue();
        text = hoa_system.Translate("...");
        dialogue:AddLine(text, kalya);
        DialogueManager:AddDialogue(dialogue);
        kalya:AddDialogueReference(dialogue);


    elseif (GlobalEvents:DoesEventExist("quest1_orlinn_dialogue1_done") == true) then
        -- At that time, Orlinn isn't in the village center anymore.
        orlinn:SetVisible(false);
        orlinn:SetNoCollision(true);
        return;
    end

    dialogue = hoa_map.SpriteDialogue();
    if (GlobalEvents:DoesEventExist("quest1_georges_dialogue_done") == true) then
        text = hoa_system.Translate("Hi hi hi!!");
        dialogue:AddLine(text, orlinn);
        text = hoa_system.Translate("What makes you laugh, Orlinn?");
        dialogue:AddLine(text, bronann);
        text = hoa_system.Translate("You'll never find it!");
        dialogue:AddLine(text, orlinn);
        text = hoa_system.Translate("Huh? Wait! Are you talking about Georges' lost pen?");
        dialogue:AddLine(text, bronann);
        text = hoa_system.Translate("Hi hi hi! Yes!");
        dialogue:AddLine(text, orlinn);
        text = hoa_system.Translate("Please tell me more! Have you found it?");
        dialogue:AddLine(text, bronann);
        text = hoa_system.Translate("Maybe yes, maybe no!");
        dialogue:AddLine(text, orlinn);
        text = hoa_system.Translate("Oh no, please Orlinn, I need it!");
        dialogue:AddLine(text, bronann);
        text = hoa_system.Translate("Sure, I'll help you but only if you can catch me!");
        dialogue:AddLineEvent(text, orlinn, "Quest1: Make Orlinn run and hide");
    else
        text = hoa_system.Translate("Heya Bro! Wanna play with me?");
        dialogue:AddLine(text, orlinn);
    end
	DialogueManager:AddDialogue(dialogue);
	orlinn:AddDialogueReference(dialogue);

    -- Default behaviour
    event = hoa_map.RandomMoveSpriteEvent("Orlinn random move", orlinn, 4000, 2000);
	event:AddEventLinkAtEnd("Orlinn random move", 3000); -- Loop on itself
	EventManager:RegisterEvent(event);
	EventManager:StartEvent("Orlinn random move");
end


-- Map Custom functions
if (map_functions == nil) then
	map_functions = {}
end

map_functions = {

	Quest1GeorgesDialogueDone = function()
		if (GlobalEvents:DoesEventExist("quest1_georges_dialogue_done") == false) then
			GlobalEvents:AddNewEvent("quest1_georges_dialogue_done", 1);
            -- Makes Orlinn aware that Bronann has talked to Georges.
            _UpdateOrlinnState();
            _UpdateGeorgesDialogue();
		end
	end,

    Quest1OrlinnRunAndHide = function()
        orlinn:SetMoving(false); -- in case he's moving
        orlinn:SetMovementSpeed(hoa_map.MapMode.VERY_FAST_SPEED);
        orlinn:ClearDialogueReferences();
		EventManager:TerminateAllEvents(orlinn);

        -- Updates Orlinn's state
        if (GlobalEvents:DoesEventExist("quest1_orlinn_dialogue1_done") == false) then
			GlobalEvents:AddNewEvent("quest1_orlinn_dialogue1_done", 1);
        end
    end,

    Quest1GeorgesTellsBronannAboutLilly =  function()
        if (GlobalEvents:DoesEventExist("quest1_pen_given_done") == false) then
			GlobalEvents:AddNewEvent("quest1_pen_given_done", 1);

            -- Remove the pen key item from inventory
            local pen_item_id = 70001;
            if (GlobalManager:IsObjectInInventory(pen_item_id) == true) then
                GlobalManager:RemoveFromInventory(pen_item_id);
            end

            -- Updates Georges dialogue
            _UpdateGeorgesDialogue();
        end
    end,

    MakeInvisible = function(sprite)
        if (sprite ~= nil) then
            sprite:SetVisible(false);
            sprite:SetNoCollision(true);
        end
    end
}
